// File: config/db.js
// K·∫øt n·ªëi t·ªõi MongoDB s·ª≠ d·ª•ng Mongoose v√† bi·∫øn m√¥i tr∆∞·ªùng
import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

/**
 * C·∫•u h√¨nh c∆° s·ªü d·ªØ li·ªáu MongoDB
 * X·ª≠ l√Ω k·∫øt n·ªëi database s·ª≠ d·ª•ng Mongoose
 */

/**
 * K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu MongoDB
 * @returns {Promise<void>}
 */
const connectDB = async() => {
    try {
        const mongoURI = process.env.MONGO_URI;

        // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng MONGO_URI
        if (!mongoURI) {
            throw new Error('Bi·∫øn m√¥i tr∆∞·ªùng MONGO_URI ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a');
        }

        // C·∫•u h√¨nh t√πy ch·ªçn k·∫øt n·ªëi MongoDB
        const connectionOptions = {
            maxPoolSize: process.env.DB_POOL_SIZE ? parseInt(process.env.DB_POOL_SIZE) : 10, // S·ªë l∆∞·ª£ng k·∫øt n·ªëi t·ªëi ƒëa
            serverSelectionTimeoutMS: 5000, // Timeout ch·ªçn server sau 5 gi√¢y
            socketTimeoutMS: 45000, // ƒê√≥ng socket sau 45 gi√¢y kh√¥ng ho·∫°t ƒë·ªông
            bufferMaxEntries: 0, // T·∫Øt buffer c·ªßa mongoose
        };

        // Th·ª±c hi·ªán k·∫øt n·ªëi
        await mongoose.connect(mongoURI, connectionOptions);

        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng MongoDB');

        // X·ª≠ l√Ω c√°c s·ª± ki·ªán k·∫øt n·ªëi
        mongoose.connection.on('error', (err) => {
            console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
        });

        mongoose.connection.on('disconnected', () => {
            console.log('‚ö†Ô∏è MongoDB ƒë√£ ng·∫Øt k·∫øt n·ªëi');
        });

        // X·ª≠ l√Ω t·∫Øt server an to√†n
        process.on('SIGINT', async() => {
            await mongoose.connection.close();
            console.log('üîÑ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB khi t·∫Øt ·ª©ng d·ª•ng');
            process.exit(0);
        });

    } catch (error) {
        console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB:', error.message);
        process.exit(1);
    }
};

export default connectDB;